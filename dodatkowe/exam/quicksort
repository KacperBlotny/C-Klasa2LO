#include <iostream>
#include <cstdlib>
#include <ctime>
#include <algorithm>
#include <stdio.h>

using namespace std;


void swap(int* a, int* b);
int partition (int arr[], int low, int high);
void quickSort(int arr[], int low, int high);

int main()
{
    int arr[] = {5,7,8,7,6,7,5,3,3};
    int n = sizeof(arr)/sizeof(arr[0]);

    for(int i=0;i<n ; i++) cout << arr[i] << " ";

    quickSort(arr, 0, n-1);
    cout <<endl <<endl;
    for(int i=0;i<n ; i++) cout << arr[i] << " ";
    return 0;
}
void swap(int* a, int* b)
{
    int t = *a;
    *a = *b;
    *b = t;
}
int partition (int arr[], int low, int high)
{
    int pivot = arr[high];
    int i = (low - 1);

    for (int j = low; j <= high- 1; j++)
    {

        if (arr[j] <= pivot)
        {
            i++;
            swap(&arr[i], &arr[j]);
        }
    }
    swap(&arr[i + 1], &arr[high]);
    return (i + 1);
}
void quickSort(int arr[], int low, int high)
{
    if (low < high)
    {
        /* pi is partitioning index, arr[p] is now
           at right place */
        int pi = partition(arr, low, high);

        // Separately sort elements before
        // partition and after partition
        quickSort(arr, low, pi - 1);
        quickSort(arr, pi + 1, high);
    }
}
